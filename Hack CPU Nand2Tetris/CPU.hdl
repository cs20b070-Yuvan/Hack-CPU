// This file is written by S.Yuvan cs20b070,G.Tej Pavan cs20b029,S.Keerthi cs20b071 
// File name:assignment8/CPU.hdl

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /** Instruction decoding:
    * There are three d-bits in the instruction, {A, D, M}, which determines which register is to accept the ALU output. **/
    DMux(in=true, sel=instruction[15], a=atype, b=ctype);
    Or(a=atype, b=instruction[5], out=ainstruct);
    And(a=ctype, b=instruction[4], out=cinstruct);

    /** A register and addressM **/
    Mux16(a=aluout, b=instruction, sel=atype, out=toareg);
    ARegister(in=toareg, load=ainstruct, out=aregout, out[0..14]=addressM);

    /** ALU **/
    Mux16(a=aregout, b=inM, sel=instruction[12], out=inputsel);

    HackALU(X=dregout, Y=inputsel, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], 
    f=instruction[7], no=instruction[6], out=aluout, zr=zr, ng=ng, out=outM);

    //writeM
    And(a=ctype, b=instruction[3], out=writeM);

    //DRegister
    DRegister(in=aluout, load=cinstruct, out=dregout);

    /** Program Counter:
    * We need to choose between the operations PC=A and PC++ (the default). The jump condition determines if PC=A happens
    * or not. default JMP, they are JGT, JEQ, JGE, JLT, JNE, and JLE. However, we only need JGT and JLE to cover all cases. 
    * The first three bits of the instruction specifies the jump condition
    **/
    Or(a=zr, b=ng, out=leqzero);		// the ALU tells us if out <=0
    Not(in=leqzero, out=posout);		// if not, out>0

    And(a=instruction[0], b=posout, out=jgt);	// if out>0 jump
    And(a=instruction[1], b=zr, out=jeq);	// if out=0 jump
    And(a=instruction[2], b=ng, out=jlt); 	// if out<0 jump
    Or(a=jeq, b=jlt, out=jle);			// if out<=0 jump
    Or(a=jgt, b=jle, out=jmp);			// covers all jump conditions

    And(a=jmp, b=ctype, out=dojump);		// the C instruction tells us to jump
    Not(in=dojump, out=nojump);			// or increment

    PC(in=aregout, load=dojump, inc=nojump, reset=reset, out[0..14]=pc);
}
